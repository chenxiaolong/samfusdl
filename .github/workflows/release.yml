---
on:
  push:
    # Uncomment to test against a branch
    #branches:
    #  - ci
    tags:
      - 'v*'
jobs:
  create_release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              version=${GITHUB_REF#refs/tags/v}
          else
              version=0.0.0-${GITHUB_REF#refs/heads/}
          fi
          echo "::set-output name=version::${version}"

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Version ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build_and_upload:
    name: Build and upload assets
    needs: create_release
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TERM_COLOR: always
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get Rust LLVM target triple
        id: get_target
        shell: bash
        run: |
          echo -n '::set-output name=name::'
          RUSTC_BOOTSTRAP=1 rustc -Z unstable-options --print target-spec-json \
              | jq -r '."llvm-target"'

      - name: Run tests in release mode
        env:
          RUST_BACKTRACE: 1
          # ENABLE_VIRTUAL_TERMINAL_PROCESSING does not work in GitHub Actions,
          # so set TERM to force crossterm to output ANSI sequences.
          TERM: xterm
        run: cargo test --workspace --release

      - name: Build in release mode
        run: cargo build --release --verbose

      - name: Strip release binary (non-Windows)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: strip target/release/samfusdl

      - name: Build archive
        shell: bash
        run: |
          base_name=samfusdl-${{ needs.create_release.outputs.version }}-${{ steps.get_target.outputs.name }}
          mkdir "${base_name}"
          cp {README.md,LICENSE} "${base_name}/"

          if [[ "${{ matrix.os }}" == windows-* ]]; then
              cp target/release/samfusdl.exe "${base_name}/"
              7z a "${base_name}.zip" "${base_name}"
              echo "ASSET=${base_name}.zip" >> "${GITHUB_ENV}"
          else
              cp target/release/samfusdl "${base_name}/"
              tar -Jcvf "${base_name}.tar.xz" "${base_name}"
              echo "ASSET=${base_name}.tar.xz" >> "${GITHUB_ENV}"
          fi

      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: ${{ env.ASSET }}
          asset_path: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
